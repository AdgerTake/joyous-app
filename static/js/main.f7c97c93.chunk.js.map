{"version":3,"sources":["static/timg.jpg","Renderer/Pages/Nothing.js","Router/index.js","Renderer/Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nothing","RootRoutes","path","component","useState","initEnd","setInitEnd","showEnd","setShowEnd","setDeskTopList","useEffect","timer1","timer2","setTimeout","clearTimeout","className","style","fontSize","display","justifyContent","alignItems","height","background","require","backgroundSize","App","map","item","key","render","routerProps","to","from","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,gHCU5BC,EARC,WACd,OACE,qC,OCASC,G,MAAa,CACxB,CACEC,KAAM,WACNC,UAAWH,GAEb,CACEE,KAAM,SACNC,UCPS,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACTC,EADS,KACAC,EADA,OAEeF,oBAAS,GAFxB,mBAETG,EAFS,KAEAC,EAFA,OAGsBJ,mBAAS,IAH/B,mBAGIK,GAHJ,WAoBjB,OAhBAC,qBAAU,WACR,IAAIC,EAAQC,EAQZ,OAPAD,EAASE,YAAW,WAClBP,GAAW,GACXM,EAASC,YAAW,WAClBL,GAAW,KACV,MACF,KACHC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACxB,WACLK,aAAaH,GACbG,aAAaF,GACbD,EAAS,GACTC,EAAS,MAEV,CAACP,EAASE,IAEX,yBAAKQ,UAAU,QAsDb,yBACEC,MAAO,CACLC,SAAU,OACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,OACRC,WAAW,OAAD,OAASC,EAAQ,IAAjB,KACVC,eAAgB,QAGpB,sE,MC7DSC,MAzBf,WACE,OACE,oCACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KAEIxB,EAAWyB,KAAI,SAAAC,GACb,OAAO,kBAAC,IAAD,CACLzB,KAAMyB,EAAKzB,KACX0B,IAAKD,EAAKzB,KACV2B,OAAQ,SAACC,GACP,OAAO,kBAACH,EAAKxB,UAAc2B,SAMnC,kBAAC,IAAD,CAAUC,GAAG,SAASC,KAAK,IAAIC,OAAK,IACpC,kBAAC,IAAD,CAAUF,GAAG,iBCVDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7c97c93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/timg.1c89153a.jpg\";","import React from 'react'\r\n\r\nconst Nothing = () => {\r\n  return (\r\n    <div>\r\n      404\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nothing\r\n","import {\r\n  Nothing,\r\n  Home\r\n} from '../Renderer/Pages/PagesArr'\r\nexport const RootRoutes = [\r\n  {\r\n    path: '/warring',\r\n    component: Nothing\r\n  },\r\n  {\r\n    path: '/plane',\r\n    component: Home\r\n  }\r\n]","import React, { useState, useEffect } from 'react'\r\n// import { Link } from 'react-router-dom'\r\nimport './Home.scss'\r\n\r\nconst Home = () => {\r\n  const [ initEnd, setInitEnd ] = useState(true) // 控制开场动画结束\r\n  const [ showEnd, setShowEnd ] = useState(true) // 控制开场动画界面\r\n  const [ deskTopList, setDeskTopList] = useState([]) // 控制选项列表\r\n  useEffect(() => {\r\n    let timer1, timer2\r\n    timer1 = setTimeout(() => {\r\n      setInitEnd(true)\r\n      timer2 = setTimeout(() => {\r\n        setShowEnd(true)\r\n      }, 10)\r\n    }, 1000)\r\n    setDeskTopList([1, 2, 3, 4, 5, 6])\r\n    return () => {\r\n      clearTimeout(timer1)\r\n      clearTimeout(timer2)\r\n      timer1 = ''\r\n      timer2 = ''\r\n    }\r\n  }, [initEnd, showEnd])\r\n  return (\r\n    <div className='home'>\r\n      {/* <div className='home-mantile'>\r\n        {\r\n          !showEnd?\r\n          <section\r\n          >\r\n            <header\r\n              className={`home-begin-header-init ${initEnd?'home-begin-header-open':''}`}\r\n            >\r\n            </header>\r\n            <main\r\n              className={\r\n                `home-begin-main`\r\n              }\r\n            >\r\n              <div\r\n                className={\r\n                  'home-begin-main-wrap'\r\n                }\r\n              >\r\n              <span className='s1'></span>\r\n              <span className='s2'></span>\r\n              <span className='s3'></span>\r\n              <span className='s4'></span>\r\n              <span className='s5'></span>\r\n              <span className='s6'></span>\r\n              </div>\r\n            </main>\r\n            <footer\r\n              className={`home-begin-footer-init ${initEnd?'home-begin-footer-open':''}`}\r\n            >\r\n            </footer>\r\n          </section>\r\n          :\r\n          <section\r\n          >\r\n            <main\r\n              className='home-desktop-main'\r\n            >\r\n              <ul\r\n                className='home-desktop-main-ul'\r\n              >\r\n              {\r\n                deskTopList.map(item => {\r\n                  return <li\r\n                    className='home-desktop-main-ul-li'\r\n                  >{item}</li>\r\n                })\r\n              }\r\n              </ul>\r\n            </main>\r\n          </section>\r\n        }\r\n      </div> */}\r\n      <div\r\n        style={{\r\n          fontSize: '40px',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '100%',\r\n          background: `url(${require('../../static/timg.jpg')})`,\r\n          backgroundSize: '20%'\r\n        }}\r\n      >\r\n      <span\r\n      >猴子是傻缺</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\r\nimport { RootRoutes } from './Router'\r\nimport './App.scss'\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n      <Switch>\r\n        {\r\n          RootRoutes.map(item => {\r\n            return <Route\r\n              path={item.path}\r\n              key={item.path}\r\n              render={(routerProps) => {\r\n                return <item.component {...routerProps}/>\r\n              }}\r\n            >\r\n            </Route>\r\n          })\r\n        }\r\n        <Redirect to='/plane' from='/' exact/>\r\n        <Redirect to='/warring'/>\r\n      </Switch>\r\n    </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App></App>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}